@use '@abstracts/variables' as vars;

*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
	-webkit-tap-highlight-color: transparent;
}
html {
	// based on 1440px -> 1rem = 10px, scales infinitely, maitains same ratio across screens
	font-size: calc(100vw / (1440 / 10));

	// Scaling calculation: clamp(downscale / base * 10px,calc(100vw / (base / 10)),upscale / base * 10px)
	// 10 -> 1rem = 10px
	// if wanna limit upscale use min
	// if wanna limit downscale use max
	// if wanna limit both use clamp

	// Ex: base = 1440, downscale = 500 , upscale = 1920
	// font-size: clamp(500 / 1440 * 10px, calc(100vw / (1440 / 10)), 1920 / 1440 * 10px);
}
body {
	font-family: vars.$font-base;
	color: vars.$primary-950;
	font-size: max(1.8rem, 14px);
}
p {
	line-height: 1.5;
}
a {
	color: inherit;
	text-decoration: none;
	transition-property: color, background-color, border-color, fill, transform, opacity;
	transition-duration: vars.$dt;
}
picture {
	display: flex;
	overflow: hidden;
}
img {
	width: 100%;
	height: auto;
}
ul {
	list-style: none;
}
button {
	background-color: transparent;
	border: none;
	outline: none;
	cursor: pointer;
	color: inherit;
	font: inherit;
	transition-property: color, background-color, border-color, transform, outline, fill, opacity,
		stroke;
	transition-duration: vars.$dt;
	&:disabled {
		cursor: not-allowed;
	}
}
textarea {
	resize: none;
}
input,
textarea {
	font: inherit;
	color: inherit;
	border: none;
	outline: none;
	&::placeholder {
		color: inherit;
		opacity: 0.8;
	}
}

/* Lenis */
html.lenis,
html.lenis body {
	height: auto;
}

.lenis.lenis-smooth {
	scroll-behavior: auto !important;
}
.lenis.lenis-smooth [data-lenis-prevent] {
	overscroll-behavior: contain;
}
.lenis.lenis-stopped {
	overflow: hidden;
}
.lenis.lenis-smooth iframe {
	pointer-events: none;
}
